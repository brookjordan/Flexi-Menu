var MU_System = angular.module("MU", []);

MU_System.factory("muMenus", [ "$rootScope", "$timeout", function($rootScope) {
    function addMenu(menuID, options) {
        var o = options || {}, visible = "boolean" == typeof o.visible ? o.visible : !0, state = o.state || "open", sizeOpen = o.sizeOpen || 50, sizeClosed = o.sizeClosed || 10;
        return menus.items[menuID] = {
            visible: visible,
            state: state,
            children: {},
            styles: {
                open: sizeOpen,
                closed: sizeClosed
            }
        }, menus.order.push(menuID), setAllOrders(), $rootScope.$broadcast("MU_menuAdded", {
            menuID: menuID
        }), muSystem;
    }
    function setOrder(menuID) {
        var oldOrder = angular.copy(menus.order), thisMenu = menus.items[menuID], order = orderOf(menuID);
        return thisMenu.order = order, $rootScope.$broadcast("MU_menuReordered", {
            menuID: menuID,
            oldOrder: oldOrder,
            newOrder: menus.order
        }), muSystem;
    }
    function setAllOrders() {
        var i;
        for (i in menus.items) setOrder(i);
        return muSystem;
    }
    function orderOf(menuID) {
        var order = 4 - menus.order.indexOf(menuID);
        return order;
    }
    function reorderMenus(requestedOrder) {
        var ro, item, newOrder = [], i = 0;
        for (ro = "undefined" == typeof requestedOrder ? [] : "string" == typeof requestedOrder ? requestedOrder.split(" ") : requestedOrder; i < ro.length; i += 1) item = ro[i], 
        menus.order.indexOf(item) > -1 && newOrder.push(item);
        if (newOrder.length !== menus.order.length) for (i = 0; i < menus.order.length; i += 1) item = menus.order[i], 
        -1 === newOrder.indexOf(item) && newOrder.push(item);
        return menus.order = newOrder, setAllOrders(), muSystem;
    }
    function toggleVisibility(menuID, to, ignoreLinks) {
        return menus.items[menuID].visible = "boolean" == typeof to ? to : !menus.items[menuID].visible, 
        ignoreLinks || handleLinks(menuID), setAllOrders(), $rootScope.$broadcast("MU_visibilityToggled", {
            menuID: menuID
        }), muSystem;
    }
    function isVisible(menuID) {
        return menus.items[menuID].visible;
    }
    function toggleState(menuID, to, ignoreLinks) {
        var thisMenu = menus.items[menuID];
        return thisMenu.state = "string" == typeof to ? to : "open" === thisMenu.state ? "closed" : "open", 
        ignoreLinks || handleLinks(menuID), setAllOrders(), $rootScope.$broadcast("MU_stateToggled", {
            menuID: menuID,
            newState: thisMenu.state
        }), muSystem;
    }
    function stateOf(menuID) {
        return menus.items[menuID].state;
    }
    function isOfState(menuID, state) {
        return stateOf(menuID) === state;
    }
    function linkMenus(which, how, options) {
        var linksMenus = "string" == typeof which ? which.split(" ") : which;
        return links.push({
            menus: linksMenus,
            how: how
        }), handleLink(how, linksMenus[0], linksMenus[1]), muSystem;
    }
    function unlinkMenus(which, how) {
        var thisLink, linkAIndex, linkBIndex, menuIDs, i = 0;
        if (!which) return links = [], muSystem;
        for (menuIDs = "string" == typeof which ? which.split(" ") : which; i < links.length; i += 1) thisLink = links[i], 
        linkAIndex = thisLink.menuIDs.indexOf(menuIDs[0]), linkBIndex = thisLink.menuIDs.indexOf(menuIDs[1]), 
        (-1 !== linkAIndex && -1 !== linkBIndex && linkAIndex !== linkBIndex && !how || how === thisLink.how) && links.splice(i, 1);
        return muSystem;
    }
    function handleLinks(menuID) {
        var thisLink, thisMenuLinkIndex, otherMenuLinkIndex, othermenuID, i = 0;
        for (menus.items[menuID]; i < links.length; i += 1) thisLink = links[i], thisMenuLinkIndex = thisLink.menus.indexOf(menuID), 
        thisMenuLinkIndex > -1 && (otherMenuLinkIndex = 1 - thisMenuLinkIndex, othermenuID = thisLink.menus[1 - thisMenuLinkIndex], 
        handleLink(thisLink.how, menuID, othermenuID));
    }
    function handleLink(how, A, B) {
        switch (how) {
          case "one open":
            handleLink_oneOpen(A, B);
            break;

          case "one closed":
            handleLink_oneClosed(A, B);
            break;

          case "one visible":
            handleLink_oneVisible(A, B);
            break;

          case "one hidden":
            handleLink_oneHidden(A, B);
        }
    }
    function handleLink_oneOpen(A, B) {
        {
            var thisMenu = menus.items[A];
            menus.items[B];
        }
        "open" === thisMenu.state && toggleState(B, "closed", !0);
    }
    function handleLink_oneClosed(A, B) {
        {
            var thisMenu = menus.items[A];
            menus.items[B];
        }
        "closed" === thisMenu.state && toggleState(B, "open", !0);
    }
    function handleLink_oneVisible(A, B) {
        {
            var thisMenu = menus.items[A];
            menus.items[B];
        }
        thisMenu.visible && toggleVisibility(B, !1, !0);
    }
    function handleLink_oneHidden(A, B) {
        {
            var thisMenu = menus.items[A];
            menus.items[B];
        }
        thisMenu.visible || toggleVisibility(B, !0, !0);
    }
    function muSystem() {
        return menus;
    }
    var menus = {
        items: {},
        order: []
    }, links = [];
    return muSystem.add = addMenu, muSystem.link = linkMenus, muSystem.unlink = unlinkMenus, 
    muSystem.reorder = reorderMenus, muSystem.toggleState = toggleState, muSystem.toggleVisibility = toggleVisibility, 
    muSystem.setOrder = setOrder, muSystem.isVisible = isVisible, muSystem.is = isOfState, 
    muSystem.state = stateOf, muSystem.menus = menus.items, muSystem.menusBase = menus, 
    muSystem;
} ]), MU_System.factory("muContent", [ "$window", "$rootScope", "$timeout", "muMenus", function($window, $rootScope, $timeout, muMenus) {
    function setSystemMetrics() {
        var offsetLeft = getSize("left"), offsetRight = getSize("right"), offsetTop = getSize("top"), offsetBottom = getSize("bottom");
        offsetLeft + offsetRight > muContent.containerWidth && (offsetLeft > muContent.containerWidth ? (offsetRight = 0, 
        offsetLeft = muContent.containerWidth) : offsetRight = muContent.containerWidth - offsetLeft), 
        systemMetrics = {
            top: offsetTop,
            right: offsetRight,
            bottom: offsetBottom,
            left: offsetLeft,
            order: 0
        };
    }
    function getSize(menuID) {
        var size;
        return size = menus.items[menuID] && menus.items[menuID].visible ? menus.items[menuID].styles[menus.items[menuID].state] : 0;
    }
    function resizeHandler() {
        var resizeIntervalLimit = 16, timeNow = +new Date();
        timeNow - lastResize > resizeIntervalLimit ? runResize() : (delayBroadcastResize && $timeout.cancel(delayBroadcastResize), 
        delayBroadcastResize = $timeout(function() {
            runResize(), delayBroadcastResize = !1;
        }, resizeIntervalLimit - (timeNow - lastResize)));
    }
    function runResize() {
        findContentSize(), setQueryStrings(), $rootScope.$broadcast("MU_windowResized"), 
        lastResize = +new Date();
    }
    function findContentSize() {
        var MUContiner = document.getElementById("MU").parentNode, containerWidth = MUContiner.getBoundingClientRect().right - MUContiner.getBoundingClientRect().left, containerHeight = MUContiner.getBoundingClientRect().bottom - MUContiner.getBoundingClientRect().top, contentWidth = containerWidth - getSize("left") - getSize("right"), contentHeight = containerHeight - getSize("top") - getSize("bottom");
        return muContent.containerWidth = containerWidth, muContent.contentWidth = contentWidth, 
        muContent.containerHeight = containerHeight, muContent.contentHeight = contentHeight, 
        contentWidth;
    }
    function addQuery(options) {
        for (var j, arg, queries, query, i = 1, args = arguments, o = options || {}, dir = "string" == typeof o ? o : o.dir || "w", context = o.context || "content", callback = o.callback || void 0; i < args.length; i += 1) {
            switch (arg = args[i], typeof arg) {
              case "string":
              case "number":
                queries = ("" + arg).split(" ");
                break;

              default:
                queries = arg;
            }
            for (j = 0; j < queries.length; j += 1) query = queries[j], "content" === context ? contentQueries[dir].push(+query) : "container" === context && (containerQueryCallbacks[query] = containerQueryCallbacks[query] || [], 
            callback && containerQueryCallbacks[query].push(callback), containerQueries[dir].push(+query));
        }
        return "content" === context ? contentQueries[dir].sort(sortNumber) : "content" === context && containerQueries[dir].sort(sortNumber), 
        setQueryStrings(), $rootScope.$broadcast("MU_windowResized"), muContent;
    }
    function setQueryStrings() {
        setContentQueryString(), setContainerQueryString();
    }
    function setContentQueryString() {
        for (var query, greaterThan = "", i = 0; i < contentQueries.w.length && (query = contentQueries.w[i], 
        !(query > muContent.contentWidth)); i += 1) greaterThan += " content-minWidth" + query;
        muContent.contentClass = greaterThan;
    }
    function setContainerQueryString() {
        for (var query, prevQuery, greaterThan = "", i = 0; i < containerQueries.w.length && (query = containerQueries.w[i], 
        !(query > muContent.containerWidth)); i += 1) greaterThan += " container-minWidth" + query, 
        prevQuery = query;
        muContent.containerClass = greaterThan, prevQuery && runContainerQueryCallbacks(prevQuery);
    }
    function runContainerQueryCallbacks(querySize) {
        var callback, i = 0, callbacks = containerQueryCallbacks[querySize];
        if (callbacks) for (;i < callbacks.length; i += 1) (callback = callbacks[i])(querySize);
    }
    function sortNumber(a, b) {
        return a - b;
    }
    function muContent() {}
    var systemMetrics = {}, menus = muMenus.menusBase, contentQueries = {
        w: [],
        h: []
    }, containerQueries = {
        w: [],
        h: []
    }, containerQueryCallbacks = {}, delayBroadcastResize = !1, lastResize = +new Date();
    return angular.element($window).bind("resize", resizeHandler), $rootScope.$on("MU_menuAdded", function() {
        findContentSize();
    }), $rootScope.$on("MU_visibilityToggled", function() {
        setSystemMetrics(), findContentSize();
    }), $rootScope.$on("MU_stateToggled", function() {
        setSystemMetrics(), findContentSize();
    }), findContentSize(), muContent.addQuery = addQuery, muContent.metrics = function() {
        return systemMetrics;
    }, muContent.contentClass = "", muContent.containerClass = "", muContent.containerWidth = 0, 
    muContent.contentWidth = 0, muContent.containerHeight = 0, muContent.contentHeight = 0, 
    muContent;
} ]);

var myApp = angular.module("myApp", [ "MU" ]);

angular.module("myApp").run([ "$templateCache", function($templateCache) {
    "use strict";
    $templateCache.put("templates/content/center.html", '<div hero-area></div>\n\n<p class="widthDisplay"></p>\n\n<div game-grid></div>\n\n<div test-buttons></div>'), 
    $templateCache.put("templates/directives/gameGridDirective.html", '<div class="gameGrid">\n	<div class="gameGrid__game" ng-repeat="game in gameGrid.games track by game.id">\n		<div class="gameGrid__game__inner" ng-style="{ \'background-color\': game.bg }"></div>\n	</div>\n</div>'), 
    $templateCache.put("templates/directives/heroAreaDirective.html", '<div class="hero" ng-style="hero.contentHeight()">\n	<h1 class="hero__title">{{ hero.title }}</h1>\n</div>'), 
    $templateCache.put("templates/directives/leftMenuDirective.html", '<div class="MU__menu-left MU__menu-left--{{ !MU_left.menus.isVisible( \'left\' ) && \'hidden\' || MU_left.menus.state( \'left\' ) }}" ng-style="MU_left.leftStyle()">\n	<div class="MU__menu-left__inner">\n		<div class="MU__navIcons MU__navIcons-left">\n			<button class="MU__navIcons__item" ng-click="MU_left.toggle( $index )" ng-repeat="button in MU_left.items" ng-class="{ \'MU__navIcons-left__item--active\': MU_left.openItem === $index }">\n				{{ $index }}\n			</button>\n		</div>\n\n		<div class="MU-you">\n			<p class="MU__mainNavItem">ONE</p>\n			<p class="MU__mainNavItem">ONE</p>\n			<p class="MU__mainNavItem">ONE</p>\n			<p class="MU__mainNavItem">ONE</p>\n			<p class="MU__mainNavItem">ONE</p>\n			<p class="MU__mainNavItem">ONE</p>\n			<p class="MU__mainNavItem">ONE</p>\n		</div>\n	</div>\n</div>'), 
    $templateCache.put("templates/directives/muSystemDirective.html", '<div class="MU {{ MU.content.contentClass }} {{ MU.content.containerClass }} {{ MU.getClassName() }}" id="MU" ng-style="MU.systemStyle()">\n\n	<div class="MU__menu-top MU__menu-top--{{ !MU.menus.isVisible( \'top\' ) && \'hidden\' || MU.menus.state( \'top\' ) }}" ng-style="MU.topStyle()">\n		<div class="MU__menu-top__inner" ng-include=" \'templates/menus/top.html\' "></div>\n	</div>\n\n	<div left-menu></div>\n	<div right-menu></div>\n\n	<div class="MU__menu-bottom MU__menu-bottom--{{ !MU.menus.isVisible( \'bottom\' ) && \'hidden\' || MU.menus.state( \'bottom\' ) }}" ng-style="MU.bottomStyle()">\n		<div class="MU__menu-bottom__inner" ng-include=" \'templates/menus/bottom.html\' "></div>\n	</div>\n\n	<div class="MU__center">\n		<div class="MU__center__scroll">\n			<div class="MU__center__content" ng-include=" \'templates/content/center.html\' "></div>\n		</div>\n	</div>\n</div>'), 
    $templateCache.put("templates/directives/rightMenuDirective.html", '<div class="MU__menu-right MU__menu-right--{{ !MU_right.menus.isVisible( \'right\' ) && \'hidden\' || MU_right.menus.state( \'right\' ) }}" ng-style="MU_right.rightStyle()">\n	<div class="MU__menu-right__inner">\n		<div class="MU__navIcons MU__navIcons-right">\n			<button class="MU__navIcons__item" ng-click="MU_right.toggle( $index )" ng-repeat="button in MU_right.items" ng-class="{ \'MU__navIcons-right__item--active\': MU_right.openItem === $index }">\n				{{ $index }}\n			</button>\n		</div>\n\n\n		<div class="MU-me">\n			<p class="MU__mainNavItem">ONE</p>\n			<p class="MU__mainNavItem">ONE</p>\n			<p class="MU__mainNavItem">ONE</p>\n			<p class="MU__mainNavItem">ONE</p>\n		</div>\n	</div>\n</div>'), 
    $templateCache.put("templates/directives/testButtonsDirective.html", '<div class="testButtons">\n	<hr style="clear: both">\n\n	<span>Toggle open:</span>\n	<br>\n	<button ng-repeat="(title, menu) in testButtons.menus.menus track by title" ng-click="testButtons.menus.toggleState( title )">\n		{{ title }}\n	</button>\n\n	<hr>\n\n\n	<span>Toggle visiblity:</span>\n	<br>\n	<button ng-repeat="(title, menu) in testButtons.menus.menus track by title" ng-click="testButtons.menus.toggleVisibility( title )">\n		<span ng-if="testButtons.menus.isVisible( title )">Hide {{ title }}</span>\n		<span ng-if="!testButtons.menus.isVisible( title )">Show {{ title }}</span>\n	</button>\n\n	<hr>\n\n\n	<span>Prioritise:</span>\n	<br>\n	<button ng-repeat="(title, menu) in testButtons.menus.menus track by title" ng-click="testButtons.menus.reorder( title )">\n		Lift {{ title }}\n	</button>\n\n	<hr>\n\n\n	<span>Link:</span>\n	<button ng-show="testButtons.menus.menus[\'left\'] && testButtons.menus.menus[\'right\']" ng-click="testButtons.linkMenus( \'left right\' )">\n		left and right\n	</button>\n	<button ng-show="testButtons.menus.menus[\'top\'] && testButtons.menus.menus[\'bottom\']" ng-click="testButtons.linkMenus( \'top bottom\' )">\n		top and bottom\n	</button>\n\n	<br>\n\n\n	<span>Unlink:</span>\n	<button ng-show="testButtons.menus.menus[\'left\'] && testButtons.menus.menus[\'right\']" ng-click="testButtons.unlinkMenus( \'left right\' )">\n		left and right\n	</button>\n	<button ng-show="testButtons.menus.menus[\'top\'] && testButtons.menus.menus[\'bottom\']" ng-click="testButtons.unlinkMenus( \'top bottom\' )">\n		top and bottom\n	</button>\n	<button ng-click="testButtons.menus.unlink()">\n		all\n	</button>\n</div>'), 
    $templateCache.put("templates/menus/bottom.html", '- -- --- -- - Cookies - -- --- -- -\n<button class="MU__menu-bottom__switch" ng-click="MU.menus.toggleVisibility( \'bottom\' )">\n</button>'), 
    $templateCache.put("templates/menus/top.html", '<nav class="MU__menu-top__nav">\n	ONE - - TWO - - THREE - - FOUR\n</nav>\n<div class="MU__menu-top__switch">\n\n	<button class="MU__menu-top__switch__right" ng-click="MU.menus.toggleState( \'top\' )">\n		Toggle Nav\n	</button>\n</div>');
} ]), myApp.directive("gameGrid", function() {
    return {
        controller: "GameGridController",
        controllerAs: "gameGrid",
        bindToController: !0,
        replace: !0,
        templateUrl: "templates/directives/gameGridDirective.html"
    };
}).controller("GameGridController", [ "muMenus", "$scope", "$interval", function() {
    var i = 0;
    for (this.games = []; 20 > i; i += 1) this.games.push({
        id: i,
        bg: "rgb(" + (110 + Math.floor(30 * Math.random())) + "," + (110 + Math.floor(30 * Math.random())) + "," + (110 + Math.floor(30 * Math.random())) + ")"
    });
} ]), myApp.directive("heroArea", function() {
    return {
        controller: "HeroController",
        controllerAs: "hero",
        bindToController: !0,
        replace: !0,
        templateUrl: "templates/directives/heroAreaDirective.html"
    };
}).controller("HeroController", [ "muContent", function(muContent) {
    function getHeroHeight() {
        var height = Math.max(200, Math.min(.6 * muContent.contentHeight, muContent.contentWidth));
        return {
            height: height + "px"
        };
    }
    this.contentHeight = getHeroHeight, this.title = "Hero Title";
} ]), myApp.directive("leftMenu", function() {
    return {
        controller: "MUMenuLeftController",
        controllerAs: "MU_left",
        bindToController: !0,
        replace: !0,
        templateUrl: "templates/directives/leftMenuDirective.html"
    };
}).controller("MUMenuLeftController", [ "muMenus", "$scope", function(muMenus, $scope) {
    var self = this;
    this.items = [ 0, 1 ], this.openItem = -1, this.toggle = function($index) {
        self.openItem === $index ? (self.openItem = -1, muMenus.toggleState("left", "closed")) : (self.openItem = $index, 
        muMenus.toggleState("left", "open"));
    }, $scope.$on("MU_stateToggled", function(event, args) {
        "left" === args.menuID && ("closed" === args.newState ? self.openItem = -1 : -1 === self.openItem && (self.openItem = 0));
    });
} ]), myApp.directive("muSystem", function() {
    return {
        controller: "MUSystemController",
        controllerAs: "MU",
        bindToController: !0,
        replace: !0,
        templateUrl: "templates/directives/muSystemDirective.html"
    };
}).controller("MUSystemController", [ "muMenus", "muContent", "$scope", "$interval", function(muMenus, muContent, $scope) {
    function capitalise(string) {
        return string.substr(0, 1).toUpperCase() + string.substr(1);
    }
    function callback(querySize) {
        switch (querySize) {
          case 700:
            muMenus.unlink().link("left right", "one open");
            break;

          default:
            muMenus.unlink();
        }
    }
    var self = this;
    self.getClassName = function() {
        var i, j, menu, menu2, className = "";
        for (i in muMenus.menus) {
            menu = muMenus.menus[i], className += " MU-" + i + "--" + (menu.visible ? menu.state : "hidden"), 
            className += " MU-" + i + "Order" + menu.order;
            for (j in muMenus.menus) j !== i && (menu2 = muMenus.menus[j], className += menu.order > menu2.order ? " MU-" + i + "Above" + capitalise(j) : " MU-" + i + "Below" + capitalise(j));
        }
        return className;
    }, self.linkMenus = function(which) {
        muMenus.link(which, prompt());
    }, self.unlinkMenus = function(which) {
        muMenus.unlink(which, prompt());
    }, muMenus.add("top", {
        sizeOpen: 80,
        sizeClosed: 50
    }).add("bottom", {
        state: "open",
        sizeOpen: 60,
        sizeClosed: 50
    }).add("right", {
        state: "closed",
        sizeOpen: 260,
        sizeClosed: 50
    }).add("left", {
        state: "closed",
        sizeOpen: 260,
        sizeClosed: 50
    }).link("left right", "one open"), muContent.addQuery({
        dir: "w",
        context: "content"
    }, "100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700"), 
    muContent.addQuery({
        dir: "w",
        context: "container",
        callback: callback
    }, "700 800"), self.menus = muMenus, self.content = muContent, self.leftIcons = "0 1 2 3 4".split(" "), 
    self.rightIcons = "0 1 2 3".split(" "), self.leftOpen = -1, self.rightOpen = -1, 
    self.selectLeft = function($index) {
        self.leftOpen = self.leftOpen !== $index ? $index : -1;
    }, self.selectRight = function($index) {
        self.rightOpen = self.rightOpen !== $index ? $index : -1;
    }, $scope.$on("MU_windowResized", function() {
        $scope.$apply();
    });
} ]), myApp.directive("rightMenu", function() {
    return {
        controller: "MUMenuRightController",
        controllerAs: "MU_right",
        bindToController: !0,
        replace: !0,
        templateUrl: "templates/directives/rightMenuDirective.html"
    };
}).controller("MUMenuRightController", [ "muMenus", "$scope", function(muMenus, $scope) {
    var self = this;
    this.items = [ 0, 1, 2, 3, 4 ], this.openItem = -1, this.menus = muMenus, this.toggle = function($index) {
        self.openItem === $index ? (self.openItem = -1, muMenus.toggleState("right", "closed")) : (self.openItem = $index, 
        muMenus.toggleState("right", "open"));
    }, $scope.$on("MU_stateToggled", function(event, args) {
        "right" === args.menuID && ("closed" === args.newState ? self.openItem = -1 : -1 === self.openItem && (self.openItem = 0));
    });
} ]), myApp.directive("testButtons", function() {
    return {
        controller: "TestButtonsController",
        controllerAs: "testButtons",
        bindToController: !0,
        replace: !0,
        templateUrl: "templates/directives/testButtonsDirective.html"
    };
}).controller("TestButtonsController", [ "muMenus", function(muMenus) {
    this.menus = muMenus;
} ]);
//# sourceMappingURL=all.min.js.map